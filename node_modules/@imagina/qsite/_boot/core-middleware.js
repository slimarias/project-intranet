import helper from '@imagina/qsite/_plugins/helper'

class Middleware {
  constructor(router, store) {
    this.router = router
    this.store = store
    this.availablesLanguages = config('app.languages.availables')
    this.defaultLanguage = config('app.languages.default')
    this.redirectTo = false
    this.checkLogin()//Check login
    this.historyPage()//Handler to history page
  }

  //CHeck login
  checkLogin() {
    return new Promise(async resolve => {
      // Validate auth
      let isAuthenticated = process.env.CLIENT ? this.store.state.quserAuth.authenticated : true
      //try login If isn't authenticated
      if (!isAuthenticated) isAuthenticated = await this.store.dispatch('quserAuth/AUTH_TRYAUTOLOGIN')
      //Response
      resolve(isAuthenticated)
    })
  }

  //Catch history page
  historyPage() {
    //Get Event change route, if was for navigator
    window.popStateDetected = false
    window.addEventListener('load', () => {
      window.history.pushState({}, '')
    })
    window.addEventListener('popstate', () => {
      window.popStateDetected = true
    })
  }

  //handler to back action in navigator
  backHandler() {
    return new Promise((resolve, reject) => {
      let doBackAction = window.popStateDetected
      let allowNavigate = true

      if (doBackAction) {
        //Close modals
        let modals = document.getElementsByClassName('q-dialog')
        if (modals && modals.length) {
          allowNavigate = false
          modals[modals.length - 1].__vue__.$parent.hide()
        }

        //Emit event
        if (!modals || !modals.length) {
          //Watch if event was catch
          this.router.app.$root.$on('back.handler.catch', () => allowNavigate = false)
          //Dispatch event
          this.router.app.$root.$emit('back.handler')
          //Close Event
          this.router.app.$root.$off('back.handler.catch')
        }
      }

      window.popStateDetected = false//Reset prop
      resolve(allowNavigate)//Response
    })
  }

  //Validate if route require authentication
  async validateRoute(to) {
    if (to.meta.authenticated) {
      //If user is authenticated
      if (await this.checkLogin()) {
        //Update user date
        this.store.dispatch('quserAuth/AUTH_UPDATE')

        //Validate permissions of route
        if (to.meta && to.meta.permission)
          if (!this.store.getters['quserAuth/hasAccess'](to.meta.permission)) this.redirectTo = {name: 'app.home'}

        //If is authenticated, redirec page from login to home
        if (!this.redirectTo && to.name == 'auth.login') this.redirectTo = {name: 'app.home'}
      } else {//If user not is authenticate
        if (to.name != 'auth.login') this.redirectTo = {name: 'auth.login'}
      }
    }
  }

  //go to next route
  goToNextRoute(to, from, next) {
    let locale = (from && from.name) ? helper.getLocaleRouteName(from.name) : false//Locale to route
    let nextRoute = (this.redirectTo && (this.redirectTo.name != to.name)) ? this.redirectTo : to//Get next route
    this.store.commit('qsiteApp/SET_CURRENT_ROUTE', (nextRoute))//Update current route

    //Validate if require locale
    if (locale && !helper.getLocaleRouteName(nextRoute.name))
      nextRoute = {...nextRoute, name: `${locale}.${nextRoute.name}`}

    //Go to route
    if (nextRoute.name == to.name) return next()
    if (from.name != nextRoute.name) return this.router.push(nextRoute)
  }
}

//Boot
export default async ({router, store, Vue, app}) => {
  let middleware = new Middleware(router, store)//Define class middleware

  //Handler to any route
  router.beforeEach(async (to, from, next) => {
    middleware.redirectTo = false//Reset redirect to

    // Validate if route change by navigator and dispatch Back handler
    let canChangeRoute = await middleware.backHandler()
    if (!canChangeRoute) return next(false)

    //Validate route authentication and permissions
    middleware.validateRoute(to)

    //Go to next route
    middleware.goToNextRoute(to, from, next)
  })
}
